# Buildkite Agent Hooks

Every agent installer comes with a hooks directory which can be used to override and extend the built-in agent behavior. For example, you could create an agent `checkout` hook which speeds up a fresh `git clone` on a new build machine, an agent `environment` hook which exports secret API keys as environment variables, or a repository `pre-command` hook which sets up some repository-specific environment variables.

<%= toc %>

## Types of hooks

There are three types of hooks:

1. [Agent hooks](#agent-hooks) - these exist on the agent’s machine, and are run for every job on any pipeline.
1. [Repository hooks](#repository-hooks) - these exist in your pipeline repository’s `.buildkite/hooks` directory.
1. [Plugin hooks](#plugin-hooks) - these are provided by any [plugins](/docs/pipelines/plugins) you've defined in your `pipeline.yml`.

## Available hooks

The following is a complete list of hooks that can be implemented, and the order in which they are called:

<table>
  <thead>
    <tr><th>Hook</th><th>Order</th></th><th>Description</th></tr>
  </thead>
  <tbody>
    <tr><td style="white-space: nowrap"><code>environment</code></td><td style="white-space: nowrap">Agent, Plugin</td><td>Runs before all other commands. Useful for <a href="/docs/agent/v3/securing#using-environment-hooks-for-secrets">exposing secret keys</a> and <a href="/docs/agent/v3/securing#whitelisting">security whitelisting</a>.</td></tr>
    <tr><td style="white-space: nowrap"><code>pre-checkout</code></td><td style="white-space: nowrap">Agent, Plugin</td><td>Runs before checkout.</td></tr>
    <tr><td style="white-space: nowrap"><code>checkout</code></td><td style="white-space: nowrap">Plugin, Agent</td><td>Overrides the default <code>git checkout</code> behavior. <em>Note:</em> If multiple checkout hooks are found, only the first will be run.</td></tr>
    <tr><td style="white-space: nowrap"><code>post-checkout</code></td><td style="white-space: nowrap">Agent, Repository, Plugin</td><td>Runs after checkout.</td></tr>
    <tr><td style="white-space: nowrap"><code>pre-command</code></td><td style="white-space: nowrap">Agent, Repository, Plugin</td><td>Runs before the build command.</td></tr>
    <tr><td style="white-space: nowrap"><code>command</code></td><td style="white-space: nowrap">Plugin, Repository, Agent</td><td>Overrides the default command running behavior. <em>Note:</em> If multiple command hooks are found, only the first will be run.</td></tr>
    <tr><td style="white-space: nowrap"><code>post-command</code></td><td style="white-space: nowrap">Agent, Repository, Plugin</td><td>Runs after the command.</td></tr>
    <tr><td style="white-space: nowrap"><code>pre-artifact</code></td><td style="white-space: nowrap">Agent, Repository, Plugin</td><td>Runs before artifacts are uploaded, if an artifact upload pattern was defined for the job.</td></tr>
    <tr><td style="white-space: nowrap"><code>post-artifact</code></td><td style="white-space: nowrap">Agent, Repository, Plugin</td><td>Runs after artifacts have been uploaded, if an artifact upload pattern was defined for the job.</td></tr>
    <tr><td style="white-space: nowrap"><code>pre-exit</code></td><td style="white-space: nowrap">Agent, Repository, Plugin</td><td>Runs before the job finishes. Useful for performing cleanup tasks.</td></tr>
  </tbody>
</table>

## Creating hook scripts

Hooks are bash scripts you can use to execute commands and export environment variables. All the standard [Buildkite environment variables](/docs/pipelines/environment-variables) are available to be used inside your hook scripts.

The following is an example of a custom `environment` hook which exports a GitHub API key for the pipeline’s release build step:

```bash
set -eu
echo '--- \:house_with_garden\: Setting up the environment'

export GITHUB_RELEASE_ACCESS_KEY='xxx'
```

The following is an example of a custom `pre-command` hook which changes the working directory before the command is run:

```bash
set -eu
echo '--- \:sparkles\: Changing to the CI directory'

cd ci
```

## Agent hooks

Each agent installer comes with a hooks directory containing a set of sample hooks. You can find the location of your agent hooks directory in your platform’s installation documentation.

To get started with agent hooks copy the relevant example script and remove the `.sample` file extension.

## Repository hooks

Repository hooks allow you to execute repository-specific scripts. Repository hooks live alongside your repository’s source code under the directory `.buildkite/hooks`.

To get started create a `.buildkite/hooks` directory, add your hook script, and make it executable.

## Plugin hooks

Plugin hooks allow any plugins you’ve defined to execute and override any of the default behavior.

See the [plugin documentation](/docs/pipelines/plugins) for how to implement plugin hooks.

## Hooks on Windows

Agents runnings Windows require hook files to have either:

* A `.bat` extension, and be written in [Windows Batch](https://en.wikipedia.org/wiki/Batch_file), or 
* Access to <a href="/docs/agent/v3/windows#git-for-windows">Git for Windows</a>, which includes bash

An example of a windows `environment.bat` hook:

```batch
@ECHO OFF
ECHO "--- \:house_with_garden\: Setting up the environment"
SET GITHUB_RELEASE_ACCESS_KEY='xxx'
```
