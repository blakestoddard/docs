# Trigger Step

A *trigger* step creates a build on another pipeline. You can use trigger steps to separate your test and deploy pipelines, or to create build dependencies between pipelines. Trigger steps can only be defined in your [pipeline.yml](/docs/pipelines/defining-steps) file.

<%= toc %>

## Permissions

All builds created by a trigger step will have the same author as the parent build. This user must:

* be a member of your organisation
* have a verified email address

If you have [Teams](/docs/pipelines/permissions) enabled in your organisation, the authoring user must also have:

* 'Build' permission on *every* pipeline that will be triggered

If the author does not have the required access, the build will fail, and builds on subsequent pipelines will not be triggered.

## Trigger Step Attributes

_Required attributes:_

<table>
  <tr>
    <td><code>trigger</code></td>
    <td>
      The slug of the pipeline to create a build. The pipeline slug must be lowercase.<br>
      <em>Example:</em> <code>"another-pipeline"</code>
    </td>
  </tr>
</table>

_Optional attributes:_

<table>
  <tr>
    <td><code>build</code></td>
    <td>
      An optional map of attributes for the triggered build.
    </td>
  </tr>
  <tr>
    <td><code>label</code></td>
    <td>
      The label that will be displayed in the pipeline visualisation in Buildkite. Supports emoji.<br>
      <em>Example:</em> <code>"\:rocket\: Deploy"</code><br>
    </td>
  </tr>
  <tr>
    <td><code>async</code></td>
    <td>
      If set to <code>true</code> the step will immediately continue, regardless of the success of the triggered build. If set to <code>false</code> the step will wait for the triggered build to complete and continue only if the triggered build passed.
      <em>Default value:</em> <code>false</code>
    </td>
  </tr>
  <tr>
    <td><code>branches</code></td>
    <td>
      The <a href="/docs/pipelines/branch-configuration#branch-pattern-examples">branch pattern</a> defining which branches will include this step in their builds.<br>
      <em>Example:</em> <code>"master stable/*"</code>
    </td>
  </tr>
</table>

_Optional_ `build` _attributes:_

<table>
  <tr>
    <td><code>message</code></td>
    <td>
      The message for the build. Supports emoji. Default: the label of the trigger step.
      <br>
      <em>Example:</em> <code>"Triggered build"</code><br>
    </td>
  </tr>
  <tr>
    <td><code>commit</code></td>
    <td>
      The commit hash for the build. Default: <code>"HEAD"</code><br>
      <em>Example:</em> <code>"ca82a6d"</code><br>
    </td>
  </tr>
  <tr>
    <td><code>branch</code></td>
    <td>
      The branch for the build. Default: <code>"master"</code><br>
      <em>Example:</em> <code>"production"</code><br>
    </td>
  </tr>
  <tr>
    <td><code>meta_data</code></td>
    <td>
      A map of <a href="/docs/pipelines/build-meta-data">meta-data</a> for the build.<br>
      <em>Example:</em> <code>release-version: "1.1"</code>
    </td>
  </tr>
  <tr>
    <td><code>env</code></td>
    <td>
      A map of <a href="/docs/pipelines/environment-variables">environment variables</a> for the build.<br>
      <em>Example:</em> <code>RAILS_ENV: "test"</code>
    </td>
  </tr>
</table>

```yml
- trigger: "data-generator"
  label: "\:package\: Generate data"
  build:
    meta_data:
      release-version: "1.1"
```

## Environment Variables

You can use [environment variable substitution](https://buildkite.com/docs/agent/v3/cli-pipeline#environment-variable-substitution) to set attribute values:

```yml
- trigger: "app-deploy"
  label: "\:rocket\: Deploy"
  branches: "master"
  async: true
  build:
    message: "${BUILDKITE_MESSAGE}"
    commit: "${BUILDKITE_COMMIT}"
    branch: "${BUILDKITE_BRANCH}"
```

To set environment variables on the build created by the trigger step, use the `env` attribute:

```yml
- trigger: "release-binaries"
  label: "\:package\: Release"
  build:
    env:
      RELEASE_STREAM: "${RELEASE_STREAM:-stable}"
```
