# Manual SSO Setup with GraphQL

- can self-serve your SSO setup with Buildkite using GraphQL

Follow the steps below to enable SSO for your organization. You will also need to set up Buildkite in your identity provider, there are guides available for [Google](/docs/tutorials/google), [Okta](/docs/tutorials/okta), [OneLogin](/docs/tutorials/onelogin), [AD FS](/docs/tutorials/adfs), and [custom SAML setups](/docs/tutorials/custom-saml). 

<%= toc %>

## How to enable SSO with GraphQL

- you need the service URL from Buildkite before you can finish setting up things in your identity provider

- overview: set up a blank SSO provider in Buildkite, do the set up in your SSO provider, come back and update your blank Buildkite SSO to contain the details of your provider
- the set up on the Buildkite side is done via a series of graphql operations

This guide is not intended as an API reference, and so won't cover every available option. If you haven't used our graphql explorer, check out our [API guide](/docs/graphql-api#getting-started). Full API documentation is available in the graphql explorer.

### Part 1 of 5: Get your Organization ID

To begin setting up your organization with SSO, you need your Buildkite Organization ID. This can be found on your 'Organization Settings' page in Buildkite.

### Part 2 of 5: Create your Identity Provider

Use the provider create mutation to create a blank identity provider in your Buildkite organization.

After you set up Buildkite in your identity provider, you will come back and fill add the provider details to using the provider update mutation. 

The following example code creates a blank SAML provider:

```graphql
mutation MakeBlankProvider {
  ssoProviderCreate(input:{
    organizationId:"<paste your organization id here>",
    type:SAML
  }) {
    ssoProvider {
      id
      type
      ...on SSOProviderSAML {
        serviceProvider {
          issuer
          ssoURL
          metadata {
            url
          }
        }
      }
    }
  }
}
```

The provider id that is returned by the create mutation will be required in steps 4 and 5. 

You can choose from three different provider types: `SAML`, `GOOGLE_OAUTH`, and `GITHUB_OAUTH`. See the expanding sections below for code samples for each provider type.

<details>
  <summary>Google_oauth</summary>
  <p>Add the two required fields for google authentication:
    <ul>
      <li>googleHostedDomain: the domain your team uses with Google G Suite as a string</li>
      <li>discloseGoogleHostedDomain: a boolean describing whether or not you'd like your domain name to be listed on the authentication page </li>
    </ul>
  </p>
  <p>
    Example code:
    <pre>
    mutation CreateGoogleProvider {
      ssoProviderCreate(input:{
        organizationId:"<paste your organization id here>",
        type:GOOGLE_OAUTH,
        googleHostedDomain:"coffee.com",
        discloseGoogleHostedDomain: false
      }) {
        ssoProvider {
          id
          url
          ...on SSOProviderGoogleOAuth {
            googleHostedDomain
            discloseGoogleHostedDomain
          }
        }
      }
    }</pre>
  </p>
</details>

<details>
  <summary>Github_oauth</summary>
  <p>add your github organization name:
    <ul>
      <li>githuborganizationname: 'test'</li>
    </ul>
  </p>
  <p>
    Example code:
    <pre>
      mutation CreateGitHubProvider {
        ssoProviderCreate(input:{
          organizationId:"<paste your organization id here>",
          type:GITHUB_OAUTH,
          githubOrganizationName:"buildkite"
        }) {
          ssoProvider {
            id
            url
            ...on SSOProviderGithubOAuth {
              githubOrganizationName
            }
          }
        }
      }</pre>
  </p>
</details>

<details>
  <summary>SAML</summary>
  <p>If you haven't set up your identity provider with buildkite, do that before continuing with this guide.</p>
  <p>If you've already set up your identity provider, see [the examples below](#create-a-saml-provider-with-data) for code to create your identity provider with data</p>
</details>

### Part 3 of 5: Test the login flow

Test the login flow with your new SSO provider. Ensure that a user can successfully complete the new authentication and gain access to your Buildkite organization before continuing. The next step, enabling your provider, will return an error if a successful test has not occurred.

### Part 4 of 5: Enable the provider for your organization

After testing that the new authorization URL works and can log in a user with the correct email domain, you can enable the SSO provider for your Buildkite organization.

Use the provider enable mutation with your provider id:

```graphql
mutation EnableProvider {
  ssoProviderEnable(
    input:{
      id:"<paste your provider id here>"
    }
  ) {
    ssoProvider {
      state
    }
  }
}
```

### Part 5 of 5: Update your provider data

Now that you have set up the Buildkite integration in your identity provider, we need to add the identity provider's information to your Buildkite organization. 

Use the provider update mutation to add your identity provider's metadata:

```graphql
mutation UpdateProvider {
  ssoProviderUpdate(input:{
    id:"<paste your provider id here>",
    identityProvider:{
      metadata:{
        url:"https://dev-242943.oktapreview.com/app/exkfs9l426YMuKPnM0h7/sso/saml/metadata"
      }
    }
  }) {
    ssoProvider {
      ...on SSOProviderSAML {
        identityProvider {
          issuer
          certificate
          ssoURL
          metadata {
            xml
            url
          }
        }
      }
    }
  }
}
```

The provider update mutation can also be used to update your provider data if it changes. Updates cannot be completed while a provider is enabled; to make changes to your provider, you will need to disable it, make your changes, then re-test and re-enable the provider.

## Advanced configuration

- you don't need to set up a blank one if you already have your ID prov. information
- set up your identity provider, set up your SSO in Buildkite with the details, go back to your identity provider and add the service url 

- can have as many different providers enabled at the same time as you need, they will all be displayed to users before they go through the authorisation flow

### Optional parameters

You can add a note to each provider's login screen to provide information to your users. <screenshot>

You can also set a session duration to enforce periodic re-authentication. The note and session duration attributes can be set on both the create and update mutations. Use the `note` field and `sessionDurationInHours` field respectively, both of which are top level attributes under the input object in the `ssoProviderCreate` and `ssoProviderUpdate` mutations.

In the following example an existing identity provider is specified in the `id` field, and its note and session duration properties are updated:

```graphql
mutation UpdateProvider {
  ssoProviderUpdate(input:{
    id:"<paste your provider id here>",
    note: "\:ruby\: Ruby team, please sign in here"
    sessionDurationInHours: 72
  }) 
}
```

## Available GraphQL operations

In addition to the operations in the examples above (create and update), the following examples cover the rest of the available SSO operations. 

Full API documentation for the GraphQL SSO operations can be found in the [GraphQL explorer](https://graphql.buildkite.com/explorer). To use the explorer, generate an API token from your personal settings page and use that to log in to the explorer. The documentation can be found in the top right corner, and are searchable.

### Create a non-blank SAML provider

If you've already set up your identity provider, you can create your Buildkite SAML provider with data instead of creating a blank provider. 

There are three different options for data entry: Static data, an XML blob, or an XML URL. See the expanding sections below for code samples for each data entry option.

<details>
  <summary>Static data</summary>
  <p>Static data identity provider required fields:
    <ul>
      <li>`ssoURL` as a string</li>
      <li>`issuer` as a string</li>
      <li>`certificate` as a string</li>
    </ul>
  </p>
  <p>
    Example code:
    <pre>
    mutation MakeStaticDataProvider {
      ssoProviderCreate(input:{
        organizationId:"<paste your organization id here>",
        type:SAML,
        identityProvider:{
          ssoURL:"https://okta.com/111111111",
          issuer: "https://okta.com/aaaaaaaaa",
          certificate:"---BEGIN CERT---zga9d6fa98f7sa987d9829h"
        }
      }) {
        ssoProvider {
          id
          type
          ...on SSOProviderSAML {
            serviceProvider {
              issuer
              ssoURL
              metadata {
                url
              }
            }
          }
        }
      }
    }</p>
</details>

<details>
  <summary>XML blob</summary>
  <p>XML blob identity provider required fields:
    <ul>
      <li>`metadata` as an object, containing `xml` as a string</li>
    </ul>
  </p>
  <p>
    Example code:
    <pre>
    mutation MakeXMLblobProvider {
      ssoProviderCreate(input:{
        organizationId:"<paste your organization id here>",
        type:SAML,
        identityProvider:{
          metadata:{
            xml: "..."
          }
        }
      }) {
        ssoProvider {
          id
          type
          ...on SSOProviderSAML {
            serviceProvider {
              issuer
              ssoURL
              metadata {
                url
              }
            }
          }
        }
      }
    }</p>
</details>

<details>
  <summary>XML URL</summary>
  <p>XML URL identity provider required fields:
    <ul>
      <li>`metadata` as an object containing `url` as a string</li>
    </ul>
  </p>
  <p>
    Example code:
    <pre>
    mutation MakeXMLurlProvider {
      ssoProviderCreate(input:{
        organizationId:"<paste your organization id here>",
        type:SAML,
        identityProvider:{
          metadata:{
            url: "..."
          }
        }
      }) {
        ssoProvider {
          id
          type
          ...on SSOProviderSAML {
            serviceProvider {
              issuer
              ssoURL
              metadata {
                url
              }
            }
          }
        }
      }
    }</p>
</details>

### View providers

The `view` query returns a list of all providers that have been created for an organization.

For example, the following code will return up to 50 providers that have been enabled on the 'acme-inc' organization: 

```graphql
query GetProviders {
  organization(slug:"acme-inc"){
    id
    ssoProviders(first: 50) {
      edges {
        node {
          id
          url
        }
      }
    }
  }
}
```

### Disable a provider

When disabling a provider, you can optionally add a reason for doing so. 

For example, the following code will disable the specified provider, and add the text "Updating to the new account" as the reason for disabling:

```graphql
mutation DisableProvider {
  ssoProviderDisable(input:{
    id:"<paste your provider id here>",
    disabledReason: "Updating to the new account"
  })
}
```

### Delete a provider

- use the delete method
- deleting the provider with graphql means that there will be no confirmation dialog or anything else when you perform the delete
- please ensure that you've entered the correct provider id and that you want to delete it rather than disabling it
- all users will go back to logging in with their buildkite username and password

```graphql
mutation DeleteProvider {
  ssoProviderDelete(input:{
    id:"<paste your provider id here>"
  })
}
```




