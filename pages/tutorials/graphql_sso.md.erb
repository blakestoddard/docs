# Manual SSO Setup with GraphQL

- can self-serve your SSO setup with Buildkite using GraphQL

Follow the steps below to enable SSO for your organization. You will also need to set up Buildkite in your identity provider, there are guides available for [Google](/docs/tutorials/google), [Okta](/docs/tutorials/okta), [OneLogin](/docs/tutorials/onelogin), [AD FS](/docs/tutorials/adfs), and [custom SAML setups](/docs/tutorials/custom-saml). 

<%= toc %>

## How to enable SSO with GraphQL

- you need the service URL from Buildkite before you can finish setting up things in your identity provider

- overview: set up a blank SSO provider in Buildkite, do the set up in your SSO provider, come back and update your blank Buildkite SSO to contain the details of your provider
- the set up on the Buildkite side is done via a series of graphql operations

This guide is not intended as an API reference, and so won't cover every available option. If you haven't used our graphql explorer, check out our [API guide](/docs/graphql-api#getting-started). Full API documentation is available in the graphql explorer.

### Part 1 of 4: Get your Organization ID

To begin setting up your organization with SSO, you need your Buildkite Organization ID. This can be found on your 'Organization Settings' page in Buildkite.

### Part 2 of 4: Create your Identity Provider

- use the create method to create a blank 
- after you set up your id provider, you will come back and fill in the provider details using the update method
- use the org id you retreived from the GET method 

The following example code creates a blank SAML provider:

```graphql
mutation MakeBlankProvider {
  ssoProviderCreate(input:{
    organizationId:"<paste your organization id here>",
    type:SAML
  }) {
    ssoProvider {
      id
      type
      ...on SSOProviderSAML {
        serviceProvider {
          issuer
          ssoURL
          metadata {
            url
          }
        }
      }
    }
  }
}
```

You can choose from three different provider types: `SAML`, `GOOGLE_OAUTH`, and `GITHUB_OAUTH`. See the expanding sections below for code samples for each provider type.

<details>
  <summary>Google_oauth</summary>
  <p>Add the two required fields for google authentication:
    <ul>
      <li>googleHostedDomain: the domain your team uses with Google G Suite as a string</li>
      <li>discloseGoogleHostedDomain: a boolean describing whether or not you'd like your domain name to be listed on the authentication page </li>
    </ul>
  </p>
  <p>
    Example code:
    <pre>
    mutation CreateGoogleProvider {
      ssoProviderCreate(input:{
        organizationId:"<paste your organization id here>",
        type:GOOGLE_OAUTH,
        googleHostedDomain:"coffee.com",
        discloseGoogleHostedDomain: false
      }) {
        ssoProvider {
          id
          url
          ...on SSOProviderGoogleOAuth {
            googleHostedDomain
            discloseGoogleHostedDomain
          }
        }
      }
    }</pre>
  </p>
</details>

<details>
  <summary>Github_oauth</summary>
  <p>add your github organization name:
    <ul>
      <li>githuborganizationname: 'test'</li>
    </ul>
  </p>
  <p>
    Example code:
    <pre>
      mutation CreateGitHubProvider {
        ssoProviderCreate(input:{
          organizationId:"<paste your organization id here>",
          type:GITHUB_OAUTH,
          githubOrganizationName:"buildkite"
        }) {
          ssoProvider {
            id
            url
            ...on SSOProviderGithubOAuth {
              githubOrganizationName
            }
          }
        }
      }</pre>
  </p>
</details>

<details>
  <summary>SAML</summary>
  <p>If you haven't set up your identity provider with buildkite, do that before continuing with this guide.</p>
  <p>If you've already set up your identity provider, see [the examples below](#create-a-saml-provider-with-data) for code to create your identity provider with data</p>
</details>

Test the login flow with your new SSO provider. Ensure that a user can successfully complete the new authentication and gain access to your Buildkite organization before continuing. The next step, enabling your provider, will return an error if a successful test has not occurred.

### Part 3 of 4: Enable the provider for your organization

- after testing that the new authorisation url works and can log in a user with the correct email domain, you can enable the sso provider for your buildkite organization
- use the enable method with your provider id, you can retrieve this using the get mutation 

```graphql
mutation EnableProvider {
  ssoProviderEnable(
    input:{
      id:"<paste your provider id here>"
    }
  ) {
    ssoProvider {
      state
    }
  }
}

```

- check that it's enabled with the get method

### Part 4 of 4: Update your provider data

- use this if you've made a blank sso provider and need to add your provider information to it
- also can be used to update your provider data if it changes

```graphql
mutation UpdateProvider {
  ssoProviderUpdate(input:{
    id:"<paste your provider id here>",
    identityProvider:{
      metadata:{
        url:"https://dev-242943.oktapreview.com/app/exkfs9l426YMuKPnM0h7/sso/saml/metadata"
      }
    }
  }) {
    ssoProvider {
      ...on SSOProviderSAML {
        identityProvider {
          issuer
          certificate
          ssoURL
          metadata {
            xml
            url
          }
        }
      }
    }
  }
}
```

- can't do an update while the provider is enabled, need to disable it, make your changes, then re-test and re-enable it once it's all working


## Advanced configuration

- you don't need to set up a blank one if you already have your ID prov. information
- set up your identity provider, set up your SSO in Buildkite with the details, go back to your identity provider and add the service url 

- can have as many different providers enabled at the same time as you need, they will all be displayed to users before they go through the authorisation flow

- can add a note to each provider login option in this list, to provide information to your users about each one 
- can also set session duration
- note and sessionduration can both be set on create and update
- use the `note` field and `sessionDurationInHours` field respectively, both of which are top level attributes under the input object in the ssoprovidercreate and ssoproviderupdate mutations

In the following example code, an existing identity provider is specified with the id field, and its note and session duration properties are updated:

```graphql
mutation UpdateProvider {
  ssoProviderUpdate(input:{
    id:"<paste your provider id here>",
    note: "\:ruby\: Ruby team, please sign in here"
    sessionDurationInHours: 72
  }) 
}
```

- full API documentation for the GraphQL SSO operations can be found in the GraphQL explorer
- generate an API token from your personal settings page that has access to the graphql beta, and use that to log in to the graphql explorer
- docs can be found in the top right corner, and are searchable

## Available GraphQL operations

- other than those mentioned above (create blank and update), these are the available operations

### Create a SAML provider with data

- instead of using the create method alone, you can add your data to it immediately
- use the create method
- there are three data entry options: Static data entry, XML blob, and XML URL

Static data identity provider required fields:

- `ssoURL` as a string
- `issuer` as a string
- `certificate` as a string

```graphql
mutation MakeStaticDataProvider {
  ssoProviderCreate(input:{
    organizationId:"<paste your organization id here>",
    type:SAML,
    identityProvider:{
      ssoURL:"https://okta.com/111111111",
      issuer: "https://okta.com/aaaaaaaaa",
      certificate:"---BEGIN CERT---zga9d6fa98f7sa987d9829h"
    }
  }) {
    ssoProvider {
      id
      type
      ...on SSOProviderSAML {
        serviceProvider {
          issuer
          ssoURL
          metadata {
            url
          }
        }
      }
    }
  }
}
```

XML blob identity provider required fields:

- `metadata` as an object, containing `xml` as a string

```graphql
mutation MakeXMLblobProvider {
  ssoProviderCreate(input:{
    organizationId:"<paste your organization id here>",
    type:SAML,
    identityProvider:{
      metadata:{
        xml: "..."
      }
    }
  }) {
    ssoProvider {
      id
      type
      ...on SSOProviderSAML {
        serviceProvider {
          issuer
          ssoURL
          metadata {
            url
          }
        }
      }
    }
  }
}
```

XML URL identity provider required fields:

- `metadata` as an object containing `url` as a string

```graphql
mutation MakeXMLurlProvider {
  ssoProviderCreate(input:{
    organizationId:"<paste your organization id here>",
    type:SAML,
    identityProvider:{
      metadata:{
        url: "..."
      }
    }
  }) {
    ssoProvider {
      id
      type
      ...on SSOProviderSAML {
        serviceProvider {
          issuer
          ssoURL
          metadata {
            url
          }
        }
      }
    }
  }
}
```

### View providers

- view all providers that have been created for an organization

```graphql
query GetProviders {
  organization(slug:"acme-inc"){
    id
    ssoProviders(first: 50) {
      edges {
        node {
          id
          url
        }
      }
    }
  }
}
```

### Disable a provider

- use the disable method, optionally with a reason for doing so

```graphql
mutation DisableProvider {
  ssoProviderDisable(input:{
    id:"<paste your provider id here>",
    disabledReason: "Updating to the new account"
  })
}
```

### Delete a provider

- use the delete method
- deleting the provider with graphql means that there will be no confirmation dialog or anything else when you perform the delete
- please ensure that you've entered the correct provider id and that you want to delete it rather than disabling it
- all users will go back to logging in with their buildkite username and password

```graphql
mutation DeleteProvider {
  ssoProviderDelete(input:{
    id:"<paste your provider id here>"
  })
}
```




