# Manual SSO Setup with GraphQL

Buildkite’s SSO login can be set up by emailing support, or you can set it up manually using our [GraphQL APIs](/docs/apis/graphql). This tutorial covers how to set up SSO manually using GraphQL, for most of the common SSO providers.

For details on every available option available in the GraphQL APIs, please use the documentation sidebar built into the [GraphQL Explorer](/docs/graphql-api#getting-started).

<%= toc %>

## Finding your organization’s GraphQL ID

For every type of SSO provider, you’ll need your Buildkite organization’s GraphQL ID. You can find the organization `id` using the following GraphQL query:

```graphql
query OrgId {
  organization(slug: "myorg") {
    id
  }
}
```

## Setting up G Suite

The first step in setting up a G Suite SSO provider is to use the `ssoProviderCreate` mutation.

```graphql
mutation CreateProvider {
  ssoProviderCreate(input: {
    organizationId: "<organization id>",
    type: GOOGLE_OAUTH,
    googleHostedDomain: "coffee.com",
    discloseGoogleHostedDomain: true
  }) {
    ssoProvider {
      id
      state
      ssoURL
    }
  }
}
```

The second step is to perform a test login by visiting the `ssoURL` returned from the create mutation.

Once a test login has been completed, you can do the final step: enabling the provider using the `ssoProviderEnable` mutation. Running this mutation will require all your users to login via your SAML provider before they can access your organization on Buildkite.

```graphql
mutation EnableProvider {
  ssoProviderEnable(
    input: {
      id: "<provider id>"
    }
  ) {
    ssoProvider {
      state
      ssoURL
    }
  }
}
```

You should now see that the provider’s state is enabled.

See the `SSOProviderUpdatePayload` documentation for other properties that can be configured on your SSO provider, such as `sessionDurationInHours` and `note`.

## Setting up GitHub

The first step in setting up a GitHub SSO provider is to use the `ssoProviderCreate` mutation.

```graphql
mutation CreateProvider {
  ssoProviderCreate(input: {
    organizationId: "<organization id>",
    type: GITHUB_OAUTH,
    githubOrganizationName: "my-org"
  }) {
    ssoProvider {
      id
      state
      ssoURL
    }
  }
}
```

The second step is to perform a test login by visiting the `ssoURL` returned from the create mutation.

Once a test login has been completed, you can do the final step: enabling the provider using the `ssoProviderEnable` mutation. Running this mutation will require all your users to login via your SAML provider before they can access your organization on Buildkite.

```graphql
mutation EnableProvider {
  ssoProviderEnable(
    input: {
      id: "<provider id>"
    }
  ) {
    ssoProvider {
      state
      ssoURL
    }
  }
}
```

You should now see that the provider’s state is enabled.

See the `SSOProviderUpdatePayload` documentation for other properties that can be configured on your SSO provider, such as `sessionDurationInHours` and `note`.

## Setting up SAML (Okta, OneLogin, ADFS and others)

The first step in setting up a SAML-based provider is to use the `ssoProviderCreate` mutation to create a new provider in Buildkite and retrieve the details you'll need for your SSO provider’s system.

```graphql
mutation CreateProvider {
  ssoProviderCreate(input: {
    organizationId: "<organization id>",
    type: SAML
  }) {
    ssoProvider {
      state
      ...on SSOProviderSAML {
        serviceProvider {
          issuer
          ssoURL
          metadata {
            url
          }
        }
      }
    }
  }
}
```

The next step is to log into your SSO provider’s system and setup Buildkite using the `issuer`, `ssoURL` and `metadata` returned above. Once setup, your SSO provider should provide a metadata URL that you can give to Buildkite.

Using the metadata URL returned from your SSO provider, call the `ssoProviderUpdate` mutation to have Buildkite automatically retrieve the details and set it up, ready for a test login. This will not yet affect any of your Buildkite users.

```graphql
mutation UpdateProviderMetaData {
  ssoProviderUpdate(input: {
    id: "<provider id>",
    identityProvider: {
      metadata: {
        url: "<meta-data URL>"
      }
    }
  }) {
    ssoProvider {
      state
      ssoURL
    }
  }
}
```

The final step before enabling the SSO provider in Buildkite, is to perform a test login.

Perform a test login via your SSO provider, or using the `ssoURL` returned from the update mutation.

Once a test login has been completed, you can do the final step: enabling the provider using the `ssoProviderEnable` mutation. Running this mutation will require all your users to login via your SAML provider before they can access your organization on Buildkite.

```graphql
mutation EnableProvider {
  ssoProviderEnable(
    input: {
      id: "<provider id>"
    }
  ) {
    ssoProvider {
      state
      ssoURL
    }
  }
}
```

You should now see that the provider’s state is enabled.

See the `SSOProviderUpdatePayload` documentation for other properties that can be configured on your SSO provider, such as `sessionDurationInHours` and `note`.